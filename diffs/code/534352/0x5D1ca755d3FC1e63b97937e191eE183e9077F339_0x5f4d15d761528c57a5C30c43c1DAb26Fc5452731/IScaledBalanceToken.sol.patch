===================================================================
--- src/contracts/interfaces/IScaledBalanceToken.sol
+++ lib/aave-v3-core/contracts/interfaces/IScaledBalanceToken.sol
@@ -1,21 +1,21 @@
-// SPDX-License-Identifier: MIT
+// SPDX-License-Identifier: AGPL-3.0
 pragma solidity ^0.8.0;
 
 /**
  * @title IScaledBalanceToken
  * @author Aave
- * @notice Defines the basic interface for a scaled-balance token.
- */
+ * @notice Defines the basic interface for a scaledbalance token.
+ **/
 interface IScaledBalanceToken {
     /**
      * @dev Emitted after the mint action
      * @param caller The address performing the mint
-     * @param onBehalfOf The address of the user that will receive the minted tokens
-     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)
-     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'
+     * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens
+     * @param value The amount being minted (user entered amount + balance increase from interest)
+     * @param balanceIncrease The increase in balance since the last action of the user
      * @param index The next liquidity index of the reserve
-     */
+     **/
     event Mint(
         address indexed caller,
         address indexed onBehalfOf,
         uint256 value,
@@ -23,16 +23,15 @@
         uint256 index
     );
 
     /**
-     * @dev Emitted after the burn action
-     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address
-     * @param from The address from which the tokens will be burned
+     * @dev Emitted after scaled balance tokens are burned
+     * @param from The address from which the scaled tokens will be burned
      * @param target The address that will receive the underlying, if any
-     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)
-     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'
+     * @param value The amount being burned (user entered amount - balance increase from interest)
+     * @param balanceIncrease The increase in balance since the last action of the user
      * @param index The next liquidity index of the reserve
-     */
+     **/
     event Burn(
         address indexed from,
         address indexed target,
         uint256 value,
@@ -45,30 +44,30 @@
      * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index
      * at the moment of the update
      * @param user The user whose balance is calculated
      * @return The scaled balance of the user
-     */
+     **/
     function scaledBalanceOf(address user) external view returns (uint256);
 
     /**
      * @notice Returns the scaled balance of the user and the scaled total supply.
      * @param user The address of the user
      * @return The scaled balance of the user
      * @return The scaled total supply
-     */
+     **/
     function getScaledUserBalanceAndSupply(
         address user
     ) external view returns (uint256, uint256);
 
     /**
      * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)
      * @return The scaled total supply
-     */
+     **/
     function scaledTotalSupply() external view returns (uint256);
 
     /**
      * @notice Returns last index interest was accrued to the user's balance
      * @param user The address of the user
      * @return The last index interest was accrued to the user's balance, expressed in ray
-     */
+     **/
     function getPreviousIndex(address user) external view returns (uint256);
 }
