===================================================================
--- src/contracts/misc/aave-upgradeability/VersionedInitializable.sol
+++ lib/aave-v3-core/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol
@@ -1,6 +1,6 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.10;
+// SPDX-License-Identifier: AGPL-3.0
+pragma solidity 0.8.10;
 
 /**
  * @title VersionedInitializable
  * @author Aave, inspired by the OpenZeppelin Initializable contract
@@ -14,17 +14,8 @@
  * because this is not dealt with automatically as with constructors.
  */
 abstract contract VersionedInitializable {
     /**
-     * @dev Initializes the implementation contract at the current revision.
-     * In practice this breaks further initialization of the implementation.
-     */
-    constructor() {
-        // break the initialize
-        lastInitializedRevision = getRevision();
-    }
-
-    /**
      * @dev Indicates that the contract has been initialized.
      */
     uint256 private lastInitializedRevision = 0;
 
@@ -61,15 +52,15 @@
     /**
      * @notice Returns the revision number of the contract
      * @dev Needs to be defined in the inherited class as a constant.
      * @return The revision number
-     */
+     **/
     function getRevision() internal pure virtual returns (uint256);
 
     /**
      * @notice Returns true if and only if the function is running in the constructor
      * @return True if the function is running in the constructor
-     */
+     **/
     function isConstructor() private view returns (bool) {
         // extcodesize checks the size of the code stored in an address, and
         // address returns the current address. Since the code is still not
         // deployed when running a constructor, any checks on its code size will
