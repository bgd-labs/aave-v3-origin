===================================================================
--- src/contracts/rewards/libraries/RewardsDataTypes.sol
+++ @aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol
@@ -1,9 +1,9 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.10;
+// SPDX-License-Identifier: agpl-3.0
+pragma solidity 0.8.10;
 
 import {ITransferStrategyBase} from "../interfaces/ITransferStrategyBase.sol";
-import {AggregatorInterface} from "../../dependencies/chainlink/AggregatorInterface.sol";
+import {IEACAggregatorProxy} from "../../misc/interfaces/IEACAggregatorProxy.sol";
 
 library RewardsDataTypes {
     struct RewardsConfigInput {
         uint88 emissionPerSecond;
@@ -11,9 +11,9 @@
         uint32 distributionEnd;
         address asset;
         address reward;
         ITransferStrategyBase transferStrategy;
-        AggregatorInterface rewardOracle;
+        IEACAggregatorProxy rewardOracle;
     }
 
     struct UserAssetBalance {
         address asset;
@@ -21,34 +21,23 @@
         uint256 totalSupply;
     }
 
     struct UserData {
-        // Liquidity index of the reward distribution for the user
-        uint104 index;
-        // Amount of accrued rewards for the user since last user index update
+        uint104 index; // matches reward index
         uint128 accrued;
     }
 
     struct RewardData {
-        // Liquidity index of the reward distribution
         uint104 index;
-        // Amount of reward tokens distributed per second
         uint88 emissionPerSecond;
-        // Timestamp of the last reward index update
         uint32 lastUpdateTimestamp;
-        // The end of the distribution of rewards (in seconds)
         uint32 distributionEnd;
-        // Map of user addresses and their rewards data (userAddress => userData)
         mapping(address => UserData) usersData;
     }
 
     struct AssetData {
-        // Map of reward token addresses and their data (rewardTokenAddress => rewardData)
         mapping(address => RewardData) rewards;
-        // List of reward token addresses for the asset
         mapping(uint128 => address) availableRewards;
-        // Count of reward tokens for the asset
         uint128 availableRewardsCount;
-        // Number of decimals of the asset
         uint8 decimals;
     }
 }
