===================================================================
--- lib/solidity-utils/lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol
+++ lib/solidity-utils/src/contracts/oz-common/SafeCast.sol
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
+// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)
 // This file was procedurally generated from scripts/generate/templates/SafeCast.js.
 
-pragma solidity ^0.8.20;
+pragma solidity ^0.8.0;
 
 /**
- * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
+ * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
  * checks.
  *
  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
  * easily result in undesired exploitation or bugs, since developers usually
@@ -14,44 +14,30 @@
  * reverting the transaction when such an operation overflows.
  *
  * Using this library instead of the unchecked operations eliminates an entire
  * class of bugs, so it's recommended to use it always.
+ *
+ * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
+ * all math on `uint256` and `int256` and then downcasting.
  */
 library SafeCast {
     /**
-     * @dev Value doesn't fit in an uint of `bits` size.
-     */
-    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
-
-    /**
-     * @dev An int value doesn't fit in an uint of `bits` size.
-     */
-    error SafeCastOverflowedIntToUint(int256 value);
-
-    /**
-     * @dev Value doesn't fit in an int of `bits` size.
-     */
-    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
-
-    /**
-     * @dev An uint value doesn't fit in an int of `bits` size.
-     */
-    error SafeCastOverflowedUintToInt(uint256 value);
-
-    /**
      * @dev Returns the downcasted uint248 from uint256, reverting on
      * overflow (when the input is greater than largest uint248).
      *
      * Counterpart to Solidity's `uint248` operator.
      *
      * Requirements:
      *
      * - input must fit into 248 bits
+     *
+     * _Available since v4.7._
      */
     function toUint248(uint256 value) internal pure returns (uint248) {
-        if (value > type(uint248).max) {
-            revert SafeCastOverflowedUintDowncast(248, value);
-        }
+        require(
+            value <= type(uint248).max,
+            "SafeCast: value doesn't fit in 248 bits"
+        );
         return uint248(value);
     }
 
     /**
@@ -62,13 +48,16 @@
      *
      * Requirements:
      *
      * - input must fit into 240 bits
+     *
+     * _Available since v4.7._
      */
     function toUint240(uint256 value) internal pure returns (uint240) {
-        if (value > type(uint240).max) {
-            revert SafeCastOverflowedUintDowncast(240, value);
-        }
+        require(
+            value <= type(uint240).max,
+            "SafeCast: value doesn't fit in 240 bits"
+        );
         return uint240(value);
     }
 
     /**
@@ -79,13 +68,16 @@
      *
      * Requirements:
      *
      * - input must fit into 232 bits
+     *
+     * _Available since v4.7._
      */
     function toUint232(uint256 value) internal pure returns (uint232) {
-        if (value > type(uint232).max) {
-            revert SafeCastOverflowedUintDowncast(232, value);
-        }
+        require(
+            value <= type(uint232).max,
+            "SafeCast: value doesn't fit in 232 bits"
+        );
         return uint232(value);
     }
 
     /**
@@ -96,13 +88,16 @@
      *
      * Requirements:
      *
      * - input must fit into 224 bits
+     *
+     * _Available since v4.2._
      */
     function toUint224(uint256 value) internal pure returns (uint224) {
-        if (value > type(uint224).max) {
-            revert SafeCastOverflowedUintDowncast(224, value);
-        }
+        require(
+            value <= type(uint224).max,
+            "SafeCast: value doesn't fit in 224 bits"
+        );
         return uint224(value);
     }
 
     /**
@@ -113,13 +108,16 @@
      *
      * Requirements:
      *
      * - input must fit into 216 bits
+     *
+     * _Available since v4.7._
      */
     function toUint216(uint256 value) internal pure returns (uint216) {
-        if (value > type(uint216).max) {
-            revert SafeCastOverflowedUintDowncast(216, value);
-        }
+        require(
+            value <= type(uint216).max,
+            "SafeCast: value doesn't fit in 216 bits"
+        );
         return uint216(value);
     }
 
     /**
@@ -130,13 +128,16 @@
      *
      * Requirements:
      *
      * - input must fit into 208 bits
+     *
+     * _Available since v4.7._
      */
     function toUint208(uint256 value) internal pure returns (uint208) {
-        if (value > type(uint208).max) {
-            revert SafeCastOverflowedUintDowncast(208, value);
-        }
+        require(
+            value <= type(uint208).max,
+            "SafeCast: value doesn't fit in 208 bits"
+        );
         return uint208(value);
     }
 
     /**
@@ -147,13 +148,16 @@
      *
      * Requirements:
      *
      * - input must fit into 200 bits
+     *
+     * _Available since v4.7._
      */
     function toUint200(uint256 value) internal pure returns (uint200) {
-        if (value > type(uint200).max) {
-            revert SafeCastOverflowedUintDowncast(200, value);
-        }
+        require(
+            value <= type(uint200).max,
+            "SafeCast: value doesn't fit in 200 bits"
+        );
         return uint200(value);
     }
 
     /**
@@ -164,13 +168,16 @@
      *
      * Requirements:
      *
      * - input must fit into 192 bits
+     *
+     * _Available since v4.7._
      */
     function toUint192(uint256 value) internal pure returns (uint192) {
-        if (value > type(uint192).max) {
-            revert SafeCastOverflowedUintDowncast(192, value);
-        }
+        require(
+            value <= type(uint192).max,
+            "SafeCast: value doesn't fit in 192 bits"
+        );
         return uint192(value);
     }
 
     /**
@@ -181,13 +188,16 @@
      *
      * Requirements:
      *
      * - input must fit into 184 bits
+     *
+     * _Available since v4.7._
      */
     function toUint184(uint256 value) internal pure returns (uint184) {
-        if (value > type(uint184).max) {
-            revert SafeCastOverflowedUintDowncast(184, value);
-        }
+        require(
+            value <= type(uint184).max,
+            "SafeCast: value doesn't fit in 184 bits"
+        );
         return uint184(value);
     }
 
     /**
@@ -198,13 +208,16 @@
      *
      * Requirements:
      *
      * - input must fit into 176 bits
+     *
+     * _Available since v4.7._
      */
     function toUint176(uint256 value) internal pure returns (uint176) {
-        if (value > type(uint176).max) {
-            revert SafeCastOverflowedUintDowncast(176, value);
-        }
+        require(
+            value <= type(uint176).max,
+            "SafeCast: value doesn't fit in 176 bits"
+        );
         return uint176(value);
     }
 
     /**
@@ -215,13 +228,16 @@
      *
      * Requirements:
      *
      * - input must fit into 168 bits
+     *
+     * _Available since v4.7._
      */
     function toUint168(uint256 value) internal pure returns (uint168) {
-        if (value > type(uint168).max) {
-            revert SafeCastOverflowedUintDowncast(168, value);
-        }
+        require(
+            value <= type(uint168).max,
+            "SafeCast: value doesn't fit in 168 bits"
+        );
         return uint168(value);
     }
 
     /**
@@ -232,13 +248,16 @@
      *
      * Requirements:
      *
      * - input must fit into 160 bits
+     *
+     * _Available since v4.7._
      */
     function toUint160(uint256 value) internal pure returns (uint160) {
-        if (value > type(uint160).max) {
-            revert SafeCastOverflowedUintDowncast(160, value);
-        }
+        require(
+            value <= type(uint160).max,
+            "SafeCast: value doesn't fit in 160 bits"
+        );
         return uint160(value);
     }
 
     /**
@@ -249,13 +268,16 @@
      *
      * Requirements:
      *
      * - input must fit into 152 bits
+     *
+     * _Available since v4.7._
      */
     function toUint152(uint256 value) internal pure returns (uint152) {
-        if (value > type(uint152).max) {
-            revert SafeCastOverflowedUintDowncast(152, value);
-        }
+        require(
+            value <= type(uint152).max,
+            "SafeCast: value doesn't fit in 152 bits"
+        );
         return uint152(value);
     }
 
     /**
@@ -266,13 +288,16 @@
      *
      * Requirements:
      *
      * - input must fit into 144 bits
+     *
+     * _Available since v4.7._
      */
     function toUint144(uint256 value) internal pure returns (uint144) {
-        if (value > type(uint144).max) {
-            revert SafeCastOverflowedUintDowncast(144, value);
-        }
+        require(
+            value <= type(uint144).max,
+            "SafeCast: value doesn't fit in 144 bits"
+        );
         return uint144(value);
     }
 
     /**
@@ -283,13 +308,16 @@
      *
      * Requirements:
      *
      * - input must fit into 136 bits
+     *
+     * _Available since v4.7._
      */
     function toUint136(uint256 value) internal pure returns (uint136) {
-        if (value > type(uint136).max) {
-            revert SafeCastOverflowedUintDowncast(136, value);
-        }
+        require(
+            value <= type(uint136).max,
+            "SafeCast: value doesn't fit in 136 bits"
+        );
         return uint136(value);
     }
 
     /**
@@ -300,13 +328,16 @@
      *
      * Requirements:
      *
      * - input must fit into 128 bits
+     *
+     * _Available since v2.5._
      */
     function toUint128(uint256 value) internal pure returns (uint128) {
-        if (value > type(uint128).max) {
-            revert SafeCastOverflowedUintDowncast(128, value);
-        }
+        require(
+            value <= type(uint128).max,
+            "SafeCast: value doesn't fit in 128 bits"
+        );
         return uint128(value);
     }
 
     /**
@@ -317,13 +348,16 @@
      *
      * Requirements:
      *
      * - input must fit into 120 bits
+     *
+     * _Available since v4.7._
      */
     function toUint120(uint256 value) internal pure returns (uint120) {
-        if (value > type(uint120).max) {
-            revert SafeCastOverflowedUintDowncast(120, value);
-        }
+        require(
+            value <= type(uint120).max,
+            "SafeCast: value doesn't fit in 120 bits"
+        );
         return uint120(value);
     }
 
     /**
@@ -334,13 +368,16 @@
      *
      * Requirements:
      *
      * - input must fit into 112 bits
+     *
+     * _Available since v4.7._
      */
     function toUint112(uint256 value) internal pure returns (uint112) {
-        if (value > type(uint112).max) {
-            revert SafeCastOverflowedUintDowncast(112, value);
-        }
+        require(
+            value <= type(uint112).max,
+            "SafeCast: value doesn't fit in 112 bits"
+        );
         return uint112(value);
     }
 
     /**
@@ -351,13 +388,16 @@
      *
      * Requirements:
      *
      * - input must fit into 104 bits
+     *
+     * _Available since v4.7._
      */
     function toUint104(uint256 value) internal pure returns (uint104) {
-        if (value > type(uint104).max) {
-            revert SafeCastOverflowedUintDowncast(104, value);
-        }
+        require(
+            value <= type(uint104).max,
+            "SafeCast: value doesn't fit in 104 bits"
+        );
         return uint104(value);
     }
 
     /**
@@ -368,13 +408,16 @@
      *
      * Requirements:
      *
      * - input must fit into 96 bits
+     *
+     * _Available since v4.2._
      */
     function toUint96(uint256 value) internal pure returns (uint96) {
-        if (value > type(uint96).max) {
-            revert SafeCastOverflowedUintDowncast(96, value);
-        }
+        require(
+            value <= type(uint96).max,
+            "SafeCast: value doesn't fit in 96 bits"
+        );
         return uint96(value);
     }
 
     /**
@@ -385,13 +428,16 @@
      *
      * Requirements:
      *
      * - input must fit into 88 bits
+     *
+     * _Available since v4.7._
      */
     function toUint88(uint256 value) internal pure returns (uint88) {
-        if (value > type(uint88).max) {
-            revert SafeCastOverflowedUintDowncast(88, value);
-        }
+        require(
+            value <= type(uint88).max,
+            "SafeCast: value doesn't fit in 88 bits"
+        );
         return uint88(value);
     }
 
     /**
@@ -402,13 +448,16 @@
      *
      * Requirements:
      *
      * - input must fit into 80 bits
+     *
+     * _Available since v4.7._
      */
     function toUint80(uint256 value) internal pure returns (uint80) {
-        if (value > type(uint80).max) {
-            revert SafeCastOverflowedUintDowncast(80, value);
-        }
+        require(
+            value <= type(uint80).max,
+            "SafeCast: value doesn't fit in 80 bits"
+        );
         return uint80(value);
     }
 
     /**
@@ -419,13 +468,16 @@
      *
      * Requirements:
      *
      * - input must fit into 72 bits
+     *
+     * _Available since v4.7._
      */
     function toUint72(uint256 value) internal pure returns (uint72) {
-        if (value > type(uint72).max) {
-            revert SafeCastOverflowedUintDowncast(72, value);
-        }
+        require(
+            value <= type(uint72).max,
+            "SafeCast: value doesn't fit in 72 bits"
+        );
         return uint72(value);
     }
 
     /**
@@ -436,13 +488,16 @@
      *
      * Requirements:
      *
      * - input must fit into 64 bits
+     *
+     * _Available since v2.5._
      */
     function toUint64(uint256 value) internal pure returns (uint64) {
-        if (value > type(uint64).max) {
-            revert SafeCastOverflowedUintDowncast(64, value);
-        }
+        require(
+            value <= type(uint64).max,
+            "SafeCast: value doesn't fit in 64 bits"
+        );
         return uint64(value);
     }
 
     /**
@@ -453,13 +508,16 @@
      *
      * Requirements:
      *
      * - input must fit into 56 bits
+     *
+     * _Available since v4.7._
      */
     function toUint56(uint256 value) internal pure returns (uint56) {
-        if (value > type(uint56).max) {
-            revert SafeCastOverflowedUintDowncast(56, value);
-        }
+        require(
+            value <= type(uint56).max,
+            "SafeCast: value doesn't fit in 56 bits"
+        );
         return uint56(value);
     }
 
     /**
@@ -470,13 +528,16 @@
      *
      * Requirements:
      *
      * - input must fit into 48 bits
+     *
+     * _Available since v4.7._
      */
     function toUint48(uint256 value) internal pure returns (uint48) {
-        if (value > type(uint48).max) {
-            revert SafeCastOverflowedUintDowncast(48, value);
-        }
+        require(
+            value <= type(uint48).max,
+            "SafeCast: value doesn't fit in 48 bits"
+        );
         return uint48(value);
     }
 
     /**
@@ -487,13 +548,16 @@
      *
      * Requirements:
      *
      * - input must fit into 40 bits
+     *
+     * _Available since v4.7._
      */
     function toUint40(uint256 value) internal pure returns (uint40) {
-        if (value > type(uint40).max) {
-            revert SafeCastOverflowedUintDowncast(40, value);
-        }
+        require(
+            value <= type(uint40).max,
+            "SafeCast: value doesn't fit in 40 bits"
+        );
         return uint40(value);
     }
 
     /**
@@ -504,13 +568,16 @@
      *
      * Requirements:
      *
      * - input must fit into 32 bits
+     *
+     * _Available since v2.5._
      */
     function toUint32(uint256 value) internal pure returns (uint32) {
-        if (value > type(uint32).max) {
-            revert SafeCastOverflowedUintDowncast(32, value);
-        }
+        require(
+            value <= type(uint32).max,
+            "SafeCast: value doesn't fit in 32 bits"
+        );
         return uint32(value);
     }
 
     /**
@@ -521,13 +588,16 @@
      *
      * Requirements:
      *
      * - input must fit into 24 bits
+     *
+     * _Available since v4.7._
      */
     function toUint24(uint256 value) internal pure returns (uint24) {
-        if (value > type(uint24).max) {
-            revert SafeCastOverflowedUintDowncast(24, value);
-        }
+        require(
+            value <= type(uint24).max,
+            "SafeCast: value doesn't fit in 24 bits"
+        );
         return uint24(value);
     }
 
     /**
@@ -538,13 +608,16 @@
      *
      * Requirements:
      *
      * - input must fit into 16 bits
+     *
+     * _Available since v2.5._
      */
     function toUint16(uint256 value) internal pure returns (uint16) {
-        if (value > type(uint16).max) {
-            revert SafeCastOverflowedUintDowncast(16, value);
-        }
+        require(
+            value <= type(uint16).max,
+            "SafeCast: value doesn't fit in 16 bits"
+        );
         return uint16(value);
     }
 
     /**
@@ -555,13 +628,16 @@
      *
      * Requirements:
      *
      * - input must fit into 8 bits
+     *
+     * _Available since v2.5._
      */
     function toUint8(uint256 value) internal pure returns (uint8) {
-        if (value > type(uint8).max) {
-            revert SafeCastOverflowedUintDowncast(8, value);
-        }
+        require(
+            value <= type(uint8).max,
+            "SafeCast: value doesn't fit in 8 bits"
+        );
         return uint8(value);
     }
 
     /**
@@ -569,13 +645,13 @@
      *
      * Requirements:
      *
      * - input must be greater than or equal to 0.
+     *
+     * _Available since v3.0._
      */
     function toUint256(int256 value) internal pure returns (uint256) {
-        if (value < 0) {
-            revert SafeCastOverflowedIntToUint(value);
-        }
+        require(value >= 0, "SafeCast: value must be positive");
         return uint256(value);
     }
 
     /**
@@ -587,14 +663,14 @@
      *
      * Requirements:
      *
      * - input must fit into 248 bits
+     *
+     * _Available since v4.7._
      */
     function toInt248(int256 value) internal pure returns (int248 downcasted) {
         downcasted = int248(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(248, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 248 bits");
     }
 
     /**
      * @dev Returns the downcasted int240 from int256, reverting on
@@ -605,14 +681,14 @@
      *
      * Requirements:
      *
      * - input must fit into 240 bits
+     *
+     * _Available since v4.7._
      */
     function toInt240(int256 value) internal pure returns (int240 downcasted) {
         downcasted = int240(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(240, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 240 bits");
     }
 
     /**
      * @dev Returns the downcasted int232 from int256, reverting on
@@ -623,14 +699,14 @@
      *
      * Requirements:
      *
      * - input must fit into 232 bits
+     *
+     * _Available since v4.7._
      */
     function toInt232(int256 value) internal pure returns (int232 downcasted) {
         downcasted = int232(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(232, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 232 bits");
     }
 
     /**
      * @dev Returns the downcasted int224 from int256, reverting on
@@ -641,14 +717,14 @@
      *
      * Requirements:
      *
      * - input must fit into 224 bits
+     *
+     * _Available since v4.7._
      */
     function toInt224(int256 value) internal pure returns (int224 downcasted) {
         downcasted = int224(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(224, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 224 bits");
     }
 
     /**
      * @dev Returns the downcasted int216 from int256, reverting on
@@ -659,14 +735,14 @@
      *
      * Requirements:
      *
      * - input must fit into 216 bits
+     *
+     * _Available since v4.7._
      */
     function toInt216(int256 value) internal pure returns (int216 downcasted) {
         downcasted = int216(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(216, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 216 bits");
     }
 
     /**
      * @dev Returns the downcasted int208 from int256, reverting on
@@ -677,14 +753,14 @@
      *
      * Requirements:
      *
      * - input must fit into 208 bits
+     *
+     * _Available since v4.7._
      */
     function toInt208(int256 value) internal pure returns (int208 downcasted) {
         downcasted = int208(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(208, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 208 bits");
     }
 
     /**
      * @dev Returns the downcasted int200 from int256, reverting on
@@ -695,14 +771,14 @@
      *
      * Requirements:
      *
      * - input must fit into 200 bits
+     *
+     * _Available since v4.7._
      */
     function toInt200(int256 value) internal pure returns (int200 downcasted) {
         downcasted = int200(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(200, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 200 bits");
     }
 
     /**
      * @dev Returns the downcasted int192 from int256, reverting on
@@ -713,14 +789,14 @@
      *
      * Requirements:
      *
      * - input must fit into 192 bits
+     *
+     * _Available since v4.7._
      */
     function toInt192(int256 value) internal pure returns (int192 downcasted) {
         downcasted = int192(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(192, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 192 bits");
     }
 
     /**
      * @dev Returns the downcasted int184 from int256, reverting on
@@ -731,14 +807,14 @@
      *
      * Requirements:
      *
      * - input must fit into 184 bits
+     *
+     * _Available since v4.7._
      */
     function toInt184(int256 value) internal pure returns (int184 downcasted) {
         downcasted = int184(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(184, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 184 bits");
     }
 
     /**
      * @dev Returns the downcasted int176 from int256, reverting on
@@ -749,14 +825,14 @@
      *
      * Requirements:
      *
      * - input must fit into 176 bits
+     *
+     * _Available since v4.7._
      */
     function toInt176(int256 value) internal pure returns (int176 downcasted) {
         downcasted = int176(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(176, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 176 bits");
     }
 
     /**
      * @dev Returns the downcasted int168 from int256, reverting on
@@ -767,14 +843,14 @@
      *
      * Requirements:
      *
      * - input must fit into 168 bits
+     *
+     * _Available since v4.7._
      */
     function toInt168(int256 value) internal pure returns (int168 downcasted) {
         downcasted = int168(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(168, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 168 bits");
     }
 
     /**
      * @dev Returns the downcasted int160 from int256, reverting on
@@ -785,14 +861,14 @@
      *
      * Requirements:
      *
      * - input must fit into 160 bits
+     *
+     * _Available since v4.7._
      */
     function toInt160(int256 value) internal pure returns (int160 downcasted) {
         downcasted = int160(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(160, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 160 bits");
     }
 
     /**
      * @dev Returns the downcasted int152 from int256, reverting on
@@ -803,14 +879,14 @@
      *
      * Requirements:
      *
      * - input must fit into 152 bits
+     *
+     * _Available since v4.7._
      */
     function toInt152(int256 value) internal pure returns (int152 downcasted) {
         downcasted = int152(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(152, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 152 bits");
     }
 
     /**
      * @dev Returns the downcasted int144 from int256, reverting on
@@ -821,14 +897,14 @@
      *
      * Requirements:
      *
      * - input must fit into 144 bits
+     *
+     * _Available since v4.7._
      */
     function toInt144(int256 value) internal pure returns (int144 downcasted) {
         downcasted = int144(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(144, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 144 bits");
     }
 
     /**
      * @dev Returns the downcasted int136 from int256, reverting on
@@ -839,14 +915,14 @@
      *
      * Requirements:
      *
      * - input must fit into 136 bits
+     *
+     * _Available since v4.7._
      */
     function toInt136(int256 value) internal pure returns (int136 downcasted) {
         downcasted = int136(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(136, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 136 bits");
     }
 
     /**
      * @dev Returns the downcasted int128 from int256, reverting on
@@ -857,14 +933,14 @@
      *
      * Requirements:
      *
      * - input must fit into 128 bits
+     *
+     * _Available since v3.1._
      */
     function toInt128(int256 value) internal pure returns (int128 downcasted) {
         downcasted = int128(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(128, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 128 bits");
     }
 
     /**
      * @dev Returns the downcasted int120 from int256, reverting on
@@ -875,14 +951,14 @@
      *
      * Requirements:
      *
      * - input must fit into 120 bits
+     *
+     * _Available since v4.7._
      */
     function toInt120(int256 value) internal pure returns (int120 downcasted) {
         downcasted = int120(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(120, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 120 bits");
     }
 
     /**
      * @dev Returns the downcasted int112 from int256, reverting on
@@ -893,14 +969,14 @@
      *
      * Requirements:
      *
      * - input must fit into 112 bits
+     *
+     * _Available since v4.7._
      */
     function toInt112(int256 value) internal pure returns (int112 downcasted) {
         downcasted = int112(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(112, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 112 bits");
     }
 
     /**
      * @dev Returns the downcasted int104 from int256, reverting on
@@ -911,14 +987,14 @@
      *
      * Requirements:
      *
      * - input must fit into 104 bits
+     *
+     * _Available since v4.7._
      */
     function toInt104(int256 value) internal pure returns (int104 downcasted) {
         downcasted = int104(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(104, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 104 bits");
     }
 
     /**
      * @dev Returns the downcasted int96 from int256, reverting on
@@ -929,14 +1005,14 @@
      *
      * Requirements:
      *
      * - input must fit into 96 bits
+     *
+     * _Available since v4.7._
      */
     function toInt96(int256 value) internal pure returns (int96 downcasted) {
         downcasted = int96(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(96, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 96 bits");
     }
 
     /**
      * @dev Returns the downcasted int88 from int256, reverting on
@@ -947,14 +1023,14 @@
      *
      * Requirements:
      *
      * - input must fit into 88 bits
+     *
+     * _Available since v4.7._
      */
     function toInt88(int256 value) internal pure returns (int88 downcasted) {
         downcasted = int88(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(88, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 88 bits");
     }
 
     /**
      * @dev Returns the downcasted int80 from int256, reverting on
@@ -965,14 +1041,14 @@
      *
      * Requirements:
      *
      * - input must fit into 80 bits
+     *
+     * _Available since v4.7._
      */
     function toInt80(int256 value) internal pure returns (int80 downcasted) {
         downcasted = int80(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(80, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 80 bits");
     }
 
     /**
      * @dev Returns the downcasted int72 from int256, reverting on
@@ -983,14 +1059,14 @@
      *
      * Requirements:
      *
      * - input must fit into 72 bits
+     *
+     * _Available since v4.7._
      */
     function toInt72(int256 value) internal pure returns (int72 downcasted) {
         downcasted = int72(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(72, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 72 bits");
     }
 
     /**
      * @dev Returns the downcasted int64 from int256, reverting on
@@ -1001,14 +1077,14 @@
      *
      * Requirements:
      *
      * - input must fit into 64 bits
+     *
+     * _Available since v3.1._
      */
     function toInt64(int256 value) internal pure returns (int64 downcasted) {
         downcasted = int64(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(64, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 64 bits");
     }
 
     /**
      * @dev Returns the downcasted int56 from int256, reverting on
@@ -1019,14 +1095,14 @@
      *
      * Requirements:
      *
      * - input must fit into 56 bits
+     *
+     * _Available since v4.7._
      */
     function toInt56(int256 value) internal pure returns (int56 downcasted) {
         downcasted = int56(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(56, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 56 bits");
     }
 
     /**
      * @dev Returns the downcasted int48 from int256, reverting on
@@ -1037,14 +1113,14 @@
      *
      * Requirements:
      *
      * - input must fit into 48 bits
+     *
+     * _Available since v4.7._
      */
     function toInt48(int256 value) internal pure returns (int48 downcasted) {
         downcasted = int48(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(48, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 48 bits");
     }
 
     /**
      * @dev Returns the downcasted int40 from int256, reverting on
@@ -1055,14 +1131,14 @@
      *
      * Requirements:
      *
      * - input must fit into 40 bits
+     *
+     * _Available since v4.7._
      */
     function toInt40(int256 value) internal pure returns (int40 downcasted) {
         downcasted = int40(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(40, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 40 bits");
     }
 
     /**
      * @dev Returns the downcasted int32 from int256, reverting on
@@ -1073,14 +1149,14 @@
      *
      * Requirements:
      *
      * - input must fit into 32 bits
+     *
+     * _Available since v3.1._
      */
     function toInt32(int256 value) internal pure returns (int32 downcasted) {
         downcasted = int32(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(32, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 32 bits");
     }
 
     /**
      * @dev Returns the downcasted int24 from int256, reverting on
@@ -1091,14 +1167,14 @@
      *
      * Requirements:
      *
      * - input must fit into 24 bits
+     *
+     * _Available since v4.7._
      */
     function toInt24(int256 value) internal pure returns (int24 downcasted) {
         downcasted = int24(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(24, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 24 bits");
     }
 
     /**
      * @dev Returns the downcasted int16 from int256, reverting on
@@ -1109,14 +1185,14 @@
      *
      * Requirements:
      *
      * - input must fit into 16 bits
+     *
+     * _Available since v3.1._
      */
     function toInt16(int256 value) internal pure returns (int16 downcasted) {
         downcasted = int16(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(16, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 16 bits");
     }
 
     /**
      * @dev Returns the downcasted int8 from int256, reverting on
@@ -1127,36 +1203,30 @@
      *
      * Requirements:
      *
      * - input must fit into 8 bits
+     *
+     * _Available since v3.1._
      */
     function toInt8(int256 value) internal pure returns (int8 downcasted) {
         downcasted = int8(value);
-        if (downcasted != value) {
-            revert SafeCastOverflowedIntDowncast(8, value);
-        }
+        require(downcasted == value, "SafeCast: value doesn't fit in 8 bits");
     }
 
     /**
      * @dev Converts an unsigned uint256 into a signed int256.
      *
      * Requirements:
      *
      * - input must be less than or equal to maxInt256.
+     *
+     * _Available since v3.0._
      */
     function toInt256(uint256 value) internal pure returns (int256) {
         // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
-        if (value > uint256(type(int256).max)) {
-            revert SafeCastOverflowedUintToInt(value);
-        }
+        require(
+            value <= uint256(type(int256).max),
+            "SafeCast: value doesn't fit in an int256"
+        );
         return int256(value);
     }
-
-    /**
-     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
-     */
-    function toUint(bool b) internal pure returns (uint256 u) {
-        assembly ("memory-safe") {
-            u := iszero(iszero(b))
-        }
-    }
 }
