Index: src/contracts/protocol/libraries/types/DataTypes.sol
===================================================================
--- src/contracts/protocol/libraries/types/DataTypes.sol
+++ src/contracts/protocol/libraries/types/DataTypes.sol
@@ -28,13 +28,13 @@
         // DEPRECATED on v3.2.0
         address stableDebtTokenAddress;
         //variableDebtToken address
         address variableDebtTokenAddress;
-        // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
+        //address of the interest rate strategy
         address interestRateStrategyAddress;
         //the current treasury balance, scaled
         uint128 accruedToTreasury;
-        // DEPRECATED on v3.4.0
+        //the outstanding unbacked aTokens minted through the bridging feature
         uint128 unbacked;
         //the outstanding debt borrowed against this asset in isolation mode
         uint128 isolationModeTotalDebt;
     }
@@ -49,11 +49,10 @@
         //variable borrow index. Expressed in ray
         uint128 variableBorrowIndex;
         //the current variable borrow rate. Expressed in ray
         uint128 currentVariableBorrowRate;
-        /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
-        // the current accumulate deficit in underlying tokens
-        uint128 deficit;
+        // DEPRECATED on v3.2.0
+        uint128 __deprecatedStableBorrowRate;
         //timestamp of last update
         uint40 lastUpdateTimestamp;
         //the id of the reserve. Represents the position in the list of the active reserves
         uint16 id;
@@ -64,19 +63,18 @@
         // DEPRECATED on v3.2.0
         address __deprecatedStableDebtTokenAddress;
         //variableDebtToken address
         address variableDebtTokenAddress;
-        // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
-        address __deprecatedInterestRateStrategyAddress;
+        //address of the interest rate strategy
+        address interestRateStrategyAddress;
         //the current treasury balance, scaled
         uint128 accruedToTreasury;
-        // In aave 3.3.0 this storage slot contained the `unbacked`
-        uint128 virtualUnderlyingBalance;
+        //the outstanding unbacked aTokens minted through the bridging feature
+        uint128 unbacked;
         //the outstanding debt borrowed against this asset in isolation mode
         uint128 isolationModeTotalDebt;
         //the amount of underlying accounted for by the protocol
-        // DEPRECATED on v3.4.0. Moved into the same slot as accruedToTreasury for optimized storage access.
-        uint128 __deprecatedVirtualUnderlyingBalance;
+        uint128 virtualUnderlyingBalance;
     }
 
     struct ReserveConfigurationMap {
         //bit 0-15: LTV
@@ -95,11 +93,11 @@
         //bit 80-115: borrow cap in whole tokens, borrowCap == 0 => no cap
         //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
         //bit 152-167: liquidation protocol fee
         //bit 168-175: DEPRECATED: eMode category
-        //bit 176-211: DEPRECATED: unbacked mint cap
+        //bit 176-211: unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
         //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-        //bit 252: DEPRECATED: virtual accounting is enabled for the reserve
+        //bit 252: virtual accounting is enabled for the reserve
         //bit 253-255 unused
 
         uint256 data;
     }
@@ -169,24 +167,21 @@
         uint40 reserveLastUpdateTimestamp;
     }
 
     struct ExecuteLiquidationCallParams {
-        address liquidator;
+        uint256 reservesCount;
         uint256 debtToCover;
         address collateralAsset;
         address debtAsset;
-        address borrower;
+        address user;
         bool receiveAToken;
         address priceOracle;
-        uint8 borrowerEModeCategory;
+        uint8 userEModeCategory;
         address priceOracleSentinel;
-        address interestRateStrategyAddress;
     }
 
     struct ExecuteSupplyParams {
-        address user;
         address asset;
-        address interestRateStrategyAddress;
         uint256 amount;
         address onBehalfOf;
         uint16 referralCode;
     }
@@ -194,43 +189,39 @@
     struct ExecuteBorrowParams {
         address asset;
         address user;
         address onBehalfOf;
-        address interestRateStrategyAddress;
         uint256 amount;
         InterestRateMode interestRateMode;
         uint16 referralCode;
         bool releaseUnderlying;
+        uint256 reservesCount;
         address oracle;
         uint8 userEModeCategory;
         address priceOracleSentinel;
     }
 
     struct ExecuteRepayParams {
         address asset;
-        address user;
-        address interestRateStrategyAddress;
         uint256 amount;
         InterestRateMode interestRateMode;
         address onBehalfOf;
         bool useATokens;
     }
 
     struct ExecuteWithdrawParams {
-        address user;
         address asset;
-        address interestRateStrategyAddress;
         uint256 amount;
         address to;
+        uint256 reservesCount;
         address oracle;
         uint8 userEModeCategory;
     }
 
-    struct ExecuteEliminateDeficitParams {
-        address user;
-        address asset;
-        address interestRateStrategyAddress;
-        uint256 amount;
+    struct ExecuteSetUserEModeParams {
+        uint256 reservesCount;
+        address oracle;
+        uint8 categoryId;
     }
 
     struct FinalizeTransferParams {
         address asset;
@@ -238,52 +229,52 @@
         address to;
         uint256 amount;
         uint256 balanceFromBefore;
         uint256 balanceToBefore;
+        uint256 reservesCount;
         address oracle;
         uint8 fromEModeCategory;
     }
 
     struct FlashloanParams {
-        address user;
         address receiverAddress;
         address[] assets;
         uint256[] amounts;
         uint256[] interestRateModes;
-        address interestRateStrategyAddress;
         address onBehalfOf;
         bytes params;
         uint16 referralCode;
-        uint256 flashLoanPremium;
+        uint256 flashLoanPremiumToProtocol;
+        uint256 flashLoanPremiumTotal;
+        uint256 reservesCount;
         address addressesProvider;
         address pool;
         uint8 userEModeCategory;
         bool isAuthorizedFlashBorrower;
     }
 
     struct FlashloanSimpleParams {
-        address user;
         address receiverAddress;
         address asset;
-        address interestRateStrategyAddress;
         uint256 amount;
         bytes params;
         uint16 referralCode;
-        uint256 flashLoanPremium;
+        uint256 flashLoanPremiumToProtocol;
+        uint256 flashLoanPremiumTotal;
     }
 
     struct FlashLoanRepaymentParams {
-        address user;
         uint256 amount;
         uint256 totalPremium;
+        uint256 flashLoanPremiumToProtocol;
         address asset;
-        address interestRateStrategyAddress;
         address receiverAddress;
         uint16 referralCode;
     }
 
     struct CalculateUserAccountDataParams {
         UserConfigurationMap userConfig;
+        uint256 reservesCount;
         address user;
         address oracle;
         uint8 userEModeCategory;
     }
@@ -294,20 +285,22 @@
         address asset;
         address userAddress;
         uint256 amount;
         InterestRateMode interestRateMode;
+        uint256 reservesCount;
         address oracle;
         uint8 userEModeCategory;
         address priceOracleSentinel;
+        bool isolationModeActive;
+        address isolationModeCollateralAddress;
+        uint256 isolationModeDebtCeiling;
     }
 
     struct ValidateLiquidationCallParams {
         ReserveCache debtReserveCache;
         uint256 totalDebt;
         uint256 healthFactor;
         address priceOracleSentinel;
-        address borrower;
-        address liquidator;
     }
 
     struct CalculateInterestRatesParams {
         uint256 unbacked;
@@ -315,17 +308,17 @@
         uint256 liquidityTaken;
         uint256 totalDebt;
         uint256 reserveFactor;
         address reserve;
-        // @notice DEPRECATED in 3.4, but kept for backwards compatibility
         bool usingVirtualBalance;
         uint256 virtualUnderlyingBalance;
     }
 
     struct InitReserveParams {
         address asset;
         address aTokenAddress;
         address variableDebtAddress;
+        address interestRateStrategyAddress;
         uint16 reservesCount;
         uint16 maxNumberReserves;
     }
 }
